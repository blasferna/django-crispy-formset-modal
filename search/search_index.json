{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the documentation for Django Crispy Formset Modal, a Python package designed to facilitate the handling of formsets in Django through a modal dialog. This tool is designed to streamline and enhance the user experience when handling formsets, by allowing you to add, edit, and delete forms from a formset in an intuitive and efficient manner.</p> <p>The Django Crispy Formset Modal package offers a wide range of functionalities:</p> <ul> <li>Allows you to add, edit, and delete forms from a formset via a modal dialog.</li> <li>Generates an HTML table according to the layout definition, allowing you to determine which fields to display as columns.</li> <li>Provides the option to define which numeric fields will be used for a totalizer at the footer of the corresponding field's column.</li> <li>Enables mass deletion of records from the HTML table, thanks to the generation of a selection column with checkboxes that can be selected individually or collectively to delete multiple records at once.</li> <li>Offers support for various templates packs, including Bootstrap 4, Bootstrap 5, Tailwind, and Bulma.</li> </ul>"},{"location":"#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>Django Crispy Formset Modal relies on several libraries to function correctly:</p> <ul> <li>Django Crispy Forms: Used to generate stylish HTML forms quickly and easily.</li> <li>Django Extra Views: For handling views with formsets.</li> <li>jQuery: Used to enable dynamic functionality.</li> </ul> <p>To use Django Crispy Formset Modal, you'll need to have these dependencies installed and properly configured in your Django project. If you need help doing this, you'll find more details in the Installation section.</p> <p>This documentation will guide you through the installation, configuration, and use of Django Crispy Formset Modal. It will also provide detailed information on how to customize the package to suit your needs and troubleshoot the most common issues that may arise. If you have any questions or need further assistance, please do not hesitate to contact us.</p> <p>Let's get started!</p>"},{"location":"advanced-usage/","title":"Advanced Usage of Django Crispy Formset Modal","text":"<p>Django Crispy Formset Modal is not limited to basic usage. It provides additional features that make it suitable for more complex use-cases. This section covers some of these advanced features and demonstrates how to apply them.</p>"},{"location":"advanced-usage/#multiple-inline-formsets","title":"Multiple Inline Formsets","text":"<p>Django Crispy Formset Modal allows you to define a master form with multiple inline formsets. For example, consider a scenario where you want to register an invoice that includes not only multiple items but also multiple payment terms.</p> <p>To achieve this, you would define additional <code>models</code>, <code>forms</code>, and inline <code>formsets</code> for the payment terms. Here's an example:</p> <pre><code># Models\nclass PaymentTerm(models.Model):\n    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)\n    due_date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n# Forms\nclass PaymentTermForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = ModalEditFormHelper()\n        self.helper.layout = ModalEditLayout(\n            \"due_date\",\n            \"amount\",\n        )\n\n    class Meta:\n        model = PaymentTerm\n        fields = \"__all__\"\n\n# Inline Formset\nclass PaymentTermInline(InlineFormSetFactory):\n    model = PaymentTerm\n    form_class = PaymentTermForm\n    fields = [\"due_date\", \"amount\"]\n    factory_kwargs = {\"extra\": 0}\n</code></pre> <p>Then, in your <code>view</code>, you would add this additional <code>inline</code> <code>formset</code> to the list of <code>inlines</code>:</p> <pre><code>class CreateInvoiceView(CreateWithInlinesView):\n    model = Invoice\n    inlines = [InvoiceItemInline, PaymentTermInline]\n    form_class = InvoiceForm\n</code></pre> <p>In your form layout, you would include a <code>ModalEditFormsetLayout</code> for this additional inline formset:</p> <pre><code>class InvoiceForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            Row(Column(\"invoice_number\"), Column(\"date\")),\n            \"client\",\n            Fieldset(\n                \"Items\",\n                ModalEditFormsetLayout(\n                    \"InvoiceItemInline\",\n                    list_display=[\"description\", \"quantity\", \"unit_price\"],\n                ),\n            ),\n            Fieldset(\n                \"Payment Terms\",\n                ModalEditFormsetLayout(\n                    \"PaymentTermInline\",\n                    list_display=[\"due_date\", \"amount\"],\n                ),\n            ),\n            Submit(\"submit\", \"Save\", css_class=\"btn btn-primary float-right\"),\n        )\n\n    class Meta:\n        model = Invoice\n        fields = \"__all__\"\n</code></pre> <p>See this example in the online demo.</p>"},{"location":"advanced-usage/#column-summarizing","title":"Column Summarizing","text":"<p>Django Crispy Formset Modal allows you to define numeric fields for totaling at the footer of the corresponding HTML table. This is useful when you want to display the total amount for specific fields.</p> <p>For instance, in the <code>InvoiceItemForm</code>, if you want to display the total amount for the quantity and unit_price fields, you would define <code>sum_columns</code> in your <code>ModalEditFormsetLayout</code>:</p> <pre><code>Fieldset(\n    \"Items\",\n    ModalEditFormsetLayout(\n        \"InvoiceItemInline\",\n        list_display=[\"description\", \"quantity\", \"unit_price\"],\n        sum_columns=[\"quantity\", \"unit_price\"],\n    ),\n),\n</code></pre> <p>This configuration would add a row at the bottom of the table that displays the total quantity and unit_price for all items in the formset. The total is dynamically updated as the values in the formset change.</p>"},{"location":"advanced-usage/#mass-deletion","title":"Mass Deletion","text":"<p>Django Crispy Formset Modal supports the mass deletion of records from the HTML table. It generates a column with checkboxes for each row in the table. These checkboxes can be selected individually or all at once, and upon pressing the delete button, all selected records are removed. This feature does not require any additional configuration.</p> <p>With these advanced features, Django Crispy Formset Modal offers flexible and powerful solutions for managing complex formsets in your Django projects. In the next section, we will cover customization options and how to adapt the package to fit your specific needs.</p>"},{"location":"advanced-usage/#recreate-all-formsets","title":"Recreate all formsets","text":"<p>Useful when you are using <code>htmx</code> and you want to recreate all formsets after a swap.</p> <pre><code>if (typeof window.crispyFormsetModal !== \"undefined\") {\n    window.crispyFormsetModal.refresh();\n}\n</code></pre>"},{"location":"advanced-usage/#events","title":"Events","text":"<p>Django Crispy Formset Modal provides two events that you can utilize to perform additional actions when forms are added or removed from the formset. These events are:</p> <ul> <li> <p><code>onFormAdded</code>: This event is triggered whenever a new form is added to the formset.</p> </li> <li> <p><code>onFormDeleted</code>: This event is triggered whenever an existing form is removed from the formset.</p> </li> <li> <p><code>onModalFormOpened</code>: This event is triggered whenever the modal form is opened.</p> </li> <li> <p><code>onModalFormClosed</code>: This event is triggered whenever the modal form is closed.</p> </li> </ul> <p>You can leverage these events to execute custom JavaScript code in response to forms being added or removed. For instance, you could use these events to update the total amount on an invoice form whenever a new line item is added or an existing one is deleted.</p> <p>Here's an example of how you can attach event listeners to these events:</p> <pre><code>document.addEventListener(\"DOMContentLoaded\", function () {\n  if (typeof window.crispyFormsetModal !== \"undefined\") {\n    window.crispyFormsetModal.onFormAdded = function (event) {\n      // Your custom code to handle form addition\n      // For example, you could update the total amount here\n    };\n\n    window.crispyFormsetModal.onFormDeleted = function (event) {\n      // Your custom code to handle form removal\n      // For example, you could update the total amount here\n    };\n\n    window.crispyFormsetModal.onModalFormOpened = function (modalForm) {\n      // Your custom code to handle modal form opened\n    };\n\n    window.crispyFormsetModal.onModalFormClosed = function (modalForm) {\n      // Your custom code to handle modal form closed\n    };\n  }\n});\n</code></pre> <p>In the example above, we first check if <code>window.crispyFormsetModal</code> exists, as it may not be available in certain scenarios. If it exists, we assign functions to the <code>onFormAdded</code> and <code>onFormDeleted</code> properties to handle the form addition and removal events, respectively. You can replace the comments with your custom logic to update the total amount or perform any other actions you need.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#014-2025-07-08","title":"[0.14] 2025-07-08","text":"<ul> <li>Fix: compile and include JavaScript files in the package.</li> </ul>"},{"location":"changelog/#013-2025-07-08","title":"[0.13] 2025-07-08","text":"<ul> <li>Django Autocomplete Light compatibility fix.</li> <li>Use uv to manage dependencies.</li> <li>Update classifiers for Django 5.x and Python.</li> <li>Added support for navigation buttons in modals.</li> <li>Improved documentation with a section on navigation buttons for modal customization.</li> </ul>"},{"location":"changelog/#012-2024-07-08","title":"[0.12] 2024-07-08","text":"<ul> <li>Translation improvements.</li> </ul>"},{"location":"changelog/#011-2024-06-07","title":"[0.11] 2024-06-07","text":"<ul> <li>Added new event handlers for modal open and close.</li> <li>Fixed z-index issue with the modal backdrop.</li> <li>Improved selection column style.</li> </ul>"},{"location":"changelog/#010-2024-05-27","title":"[0.10] 2024-05-27","text":"<ul> <li>Fix Pypa issue. </li> </ul>"},{"location":"changelog/#09-2024-05-27","title":"[0.9] 2024-05-27","text":"<ul> <li>Fixed Bootstrap 5 checkbox styling.</li> <li>Modal overlay z-index increased.</li> </ul>"},{"location":"changelog/#08-2024-03-25","title":"[0.8] 2024-03-25","text":"<ul> <li>Add ability to customize empty state message</li> </ul>"},{"location":"changelog/#07-2024-03-25","title":"[0.7] 2024-03-25","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Resolves unexpected closure of nested modals when the parent is a Bootstrap modal.</li> <li>Improve formset initialization.</li> </ul>"},{"location":"changelog/#06-2024-03-13","title":"[0.6] 2024-03-13","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Add event handlers for formset additions and deletions.</li> <li>Improve error highlighting.</li> </ul>"},{"location":"changelog/#05-2024-03-08","title":"[0.5] 2024-03-08","text":"<ul> <li>Typo fix in <code>window.crispyFormsetModal</code> object declaration.</li> </ul>"},{"location":"changelog/#04-2024-03-08","title":"[0.4] - 2024-03-08","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Created <code>window.crispyFormsetModal.refresh</code> to recreate all formsets. </li> </ul>"},{"location":"changelog/#03-2024-03-04","title":"[0.3] - 2024-03-04","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Avoid 'ModalEditFormsetLayout' object has no attribute 'fields' by @blasferna in https://github.com/blasferna/django-crispy-formset-modal/pull/14</li> </ul>"},{"location":"changelog/#02-2024-03-02","title":"[0.2] - 2024-03-02","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added functionality to customize the appearance of the edit button by overriding the template by @blasferna in https://github.com/blasferna/django-crispy-formset-modal/pull/12</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix: Declare 'checked' Variable to Resolve ReferenceError by @blasferna in https://github.com/blasferna/django-crispy-formset-modal/pull/2</li> <li>Add missing 'textarea' type by @blasferna in https://github.com/blasferna/django-crispy-formset-modal/pull/10</li> </ul>"},{"location":"changelog/#01-2023-05-19","title":"[0.1] - 2023-05-19","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Built and added publish workflow.</li> <li>Introduced invoice with payment terms example in the documentation.</li> <li>Improved documentation and added documentation deployment workflow.</li> <li>Added support for older versions of crispy_forms.</li> <li>Provided support for Bulma, Tailwind and Bootstrap5 template packs.</li> <li>Included style improvements.</li> <li>Allowed user-defined modal size and placement.</li> <li>Established app for demo.</li> <li>Implemented internationalization support.</li> <li>Added success message to demo views.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Resolved <code>CSRF verification failed</code> on fly.dev issue.</li> <li>Rectified fly secret and modal size.</li> <li>Removed unnecessary argument.</li> <li>Sorted out event conflict between modal input and submit.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated README.md.</li> <li>Deployed demo to Fly.dev.</li> <li>Removed unused imports.</li> <li>Refactored css classes, forms, js output, demo view url style and table.html.</li> <li>Updated Makefile.</li> <li>Created setup.cfg and .editorconfig.</li> <li>Added lint checker and applied lint check for demo app.</li> <li>Implemented code formatting.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Nothing was removed in this version.</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Nothing was deprecated in this version.</li> </ul>"},{"location":"contributing/","title":"Contributing to Django Crispy Formset Modal","text":"<p>We welcome contributions from the community to help make Django Crispy Formset Modal better. If you're interested in contributing, here's how you can do it:</p> <ol> <li> <p><code>Report Bugs or Suggest Features</code>: Use the GitHub issue tracker to report bugs or suggest new features. Please make sure the bug or feature hasn't already been reported or implemented before creating a new issue.</p> </li> <li> <p><code>Contribute Code</code>: If you'd like to contribute code to fix a bug or implement a feature, please follow these steps:</p> <ul> <li>Fork the repository on GitHub.</li> <li>Clone your fork to your local machine.</li> <li>Make your changes and test them thoroughly.</li> <li>Commit your changes and push to your fork on GitHub.</li> <li>Submit a pull request with a clear and detailed explanation of the changes.</li> </ul> </li> <li> <p><code>Improve Documentation</code>: Good documentation is just as important as good code. If you spot areas in the documentation that could be improved or clarified, please make the and submit a pull request.</p> </li> <li> <p><code>Spread the Word</code>: The more people who know about Django Crispy Formset Modal, the better. Share the project with your friends and colleagues, star the repository on GitHub, or write a blog post or tutorial about it.</p> </li> </ol> <p>Before contributing, please make sure to read and understand the contribution guidelines, which can be found in the project's repository.</p> <p>Remember, all contributions, no matter how small, are greatly appreciated. Thank you for your support!</p>"},{"location":"customizing/","title":"Customizing Django Crispy Formset Modal","text":"<p>Django Crispy Formset Modal offers several customization options to suit your specific requirements. This section covers some of these options.</p>"},{"location":"customizing/#using-different-template-packs","title":"Using Different Template Packs","text":"<p>Django Crispy Formset Modal comes with support for Bootstrap 4, Bootstrap 5, Tailwind, and Bulma. Select the template pack by setting the <code>CRISPY_TEMPLATE_PACK</code> option in your Django <code>settings</code>:</p> <pre><code># settings.py\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # or 'bootstrap5', 'tailwind', 'bulma'\n</code></pre> <p>Ensure that you include the respective CSS and JS files in your template for the selected pack.</p>"},{"location":"customizing/#customizing-modal-size-and-placement","title":"Customizing Modal Size and Placement","text":"<p>Django Crispy Formset Modal allows you to customize the size and placement of your modal by setting <code>modal_size</code> and <code>modal_placement</code> attributes in the <code>ModalEditFormsetLayout</code> object. You can set these attributes using the <code>ModalSize</code> and <code>ModalPlacement</code> classes respectively.</p> <p>The <code>ModalSize</code> class includes the following options:</p> <pre><code>from crispy_formset_modal import ModalSize\n\nModalSize.SM  # Small\nModalSize.MD  # Medium\nModalSize.LG  # Large\nModalSize.XL  # Extra Large\n</code></pre> <p>The <code>ModalPlacement</code> class includes the following options:</p> <pre><code>from crispy_formset_modal import ModalPlacement\n\nModalPlacement.TOP_LEFT\nModalPlacement.TOP_CENTER\nModalPlacement.TOP_RIGHT\nModalPlacement.CENTER_LEFT\nModalPlacement.CENTER\nModalPlacement.CENTER_RIGHT\nModalPlacement.BOTTOM_LEFT\nModalPlacement.BOTTOM_CENTER\nModalPlacement.BOTTOM_RIGHT\n</code></pre> <p>For instance, to set a large modal size and center placement, you would modify your formset layout like so:</p> <pre><code>self.helper.layout = Layout(\n    Fieldset(\n        \"Items\",\n        ModalEditFormsetLayout(\n            \"InvoiceItemInline\",\n            list_display=[\"description\", \"quantity\", \"unit_price\"],\n            modal_size=ModalSize.LG,  # set the modal size to large\n            modal_placement=ModalPlacement.CENTER  # set the modal placement to center\n        ),\n    ),\n    ...\n)\n</code></pre>"},{"location":"customizing/#overriding-default-templates","title":"Overriding Default Templates","text":"<p>Django Crispy Formset Modal uses several templates to render formsets and modals. These templates can be overridden to customize the look and feel of your formsets. The templates you can override are:</p> <ul> <li><code>form.html</code>: This template is used to render the form within the modal.</li> <li><code>modal.html</code>: This template is used to render the modal dialog for adding/editing formset instances.</li> <li><code>table.html</code>: This template is used to render the HTML table that displays the formset data.</li> <li><code>edit_button.html</code>: This template is used to render the record edit button in the formset table.</li> <li><code>empty_state.html</code>: This template is used to render the empty state message when there are no records in the formset.</li> </ul> <p>To override these templates, create a directory named <code>crispy_formset_modal</code> and a subdirectory named as per the template pack you're using (for instance, <code>bootstrap4</code>) in your project's templates directory. Then create your custom versions of <code>form.html</code>, <code>modal.html</code>, <code>edit_button.html</code>, <code>empty_estate.html</code>  and/or <code>table.html</code> in this directory.</p>"},{"location":"customizing/#adding-navigation-buttons-to-modal","title":"Adding Navigation Buttons to Modal","text":"<p>When overriding the <code>modal.html</code> template, you can add navigation buttons that allow users to navigate through formset records without closing the modal. This provides a more seamless editing experience.</p> <p>To add navigation buttons, include the following HTML structure in your custom <code>modal.html</code> template:</p> <pre><code>&lt;div class=\"navigation-buttons\"&gt;\n  &lt;button\n    type=\"button\"\n    class=\"btn btn-sm btn-outline-secondary\"\n    data-formset-previous-button\n  &gt;\n    &lt;i class=\"bi bi-chevron-up\" data-previous-icon&gt;&lt;/i&gt;\n  &lt;/button&gt;\n  &lt;button\n    type=\"button\"\n    class=\"btn btn-sm btn-outline-secondary\"\n    data-formset-next-button\n  &gt;\n    &lt;i class=\"bi bi-chevron-down\" data-next-icon&gt;&lt;/i&gt;\n    &lt;i class=\"bi bi-plus-lg\" data-plus-icon style=\"display: none;\"&gt;&lt;/i&gt;\n  &lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"customizing/#navigation-button-behavior","title":"Navigation Button Behavior","text":"<ul> <li> <p>Previous Button (<code>data-formset-previous-button</code>): Navigates to the previous record in the formset. The button is automatically disabled when viewing the first record.</p> </li> <li> <p>Next Button (<code>data-formset-next-button</code>): Navigates to the next record in the formset. When viewing the last record, the button icon changes to a plus sign and clicking it will create a new record.</p> </li> </ul>"},{"location":"customizing/#keyboard-navigation","title":"Keyboard Navigation","text":"<p>Navigation buttons also support keyboard shortcuts:</p> <ul> <li>Ctrl + Up Arrow: Navigate to the previous record</li> <li>Ctrl + Down Arrow: Navigate to the next record (or create new record if on the last one)</li> </ul> <p>The navigation buttons automatically handle state management, including disabling/enabling buttons based on the current position in the formset and updating icons appropriately.</p> <p>With these customization options, you can modify Django Crispy Formset Modal to better suit the needs of your project. In the next section, we'll discuss how to troubleshoot common issues and where to seek further assistance.</p>"},{"location":"demo/","title":"Live Demo and Example App","text":"<p>The best way to get started and understand how Django Crispy Formset Modal works is by exploring a working example. You can find a complete demo application in the project's repository. This application showcases a typical usage scenario of the package and can serve as a good starting point for your own applications.</p> <p>To run the demo application locally, clone the project's repository and follow the instructions provided in the README.md file. This will help you understand how the package integrates with a Django project and how to use it in your own forms.</p> <p>Additionally, we have a live demo available online. The live demo allows you to interact with a Django application that uses Django Crispy Formset Modal, without the need to set up a local development environment. You can add, edit, and delete formset instances using a modal dialog, and see how the data is displayed and managed.</p> <p>You can access the live demo at https://django-crispy-formset-modal.fly.dev.</p> <p>Exploring the live demo and demo application should give you a solid understanding of Django Crispy Formset Modal's capabilities. In the next section, we will provide a guide to contributing to the Django Crispy Formset Modal project.</p>"},{"location":"faqs/","title":"Frequently Asked Questions and Troubleshooting","text":"<p>In this section, we'll cover some common questions and provide solutions for typical issues users may face when using Django Crispy Formset Modal.</p> <p>Q: I've installed Django Crispy Formset Modal, but I don't see the changes in my formset. What could be the problem?</p> <p>A: Ensure that you've correctly added <code>'crispy_formset_modal'</code> to your <code>INSTALLED_APPS</code> setting. Also, make sure you've added the Django Crispy Formset Modal's JavaScript file in your template and properly included <code>jQuery</code>.</p> <p>Q: I'm trying to use a different template pack, but the formset still uses the default styles. What could be wrong?</p> <p>A: Check that you've set the <code>CRISPY_TEMPLATE_PACK</code> setting in your Django settings to your desired template pack. Also, ensure that you've included the respective CSS and JS files for your selected template pack in your template.</p> <p>Q: I've set the modal_size and modal_placement options, but the modal does not change its size or placement. What could be the issue?</p> <p>A: Check that you're using the <code>ModalSize</code> and <code>ModalPlacement</code> classes from the <code>crispy_formset_modal</code> package to set these options. Also, ensure that the options are set in the <code>ModalEditFormsetLayout</code> object and not elsewhere.</p> <p>Q: I've overridden the default templates, but the formset still uses the original templates. What should I do?</p> <p>A: Make sure you've created your custom templates in the correct location. For example, if you're using the Bootstrap 4 template pack and want to override the modal template, your custom template should be in a directory named <code>crispy_formset_modal/bootstrap4/modal.html</code> in your project's templates directory.</p> <p>In the event that you encounter an <code>issue</code> not covered here, please raise an issue on the Django Crispy Formset Modal's GitHub page. We appreciate your contributions to improving this package.</p> <p>In the next section, we will provide some examples of how to use Django Crispy Formset Modal in various scenarios.</p>"},{"location":"getting-started/","title":"Getting Started with Django Crispy Formset Modal","text":"<p>Now that you've successfully installed Django Crispy Formset Modal, let's walk through the basic usage and configuration of the package. This will cover defining the necessary forms and views in your Django project.</p>"},{"location":"getting-started/#step-1-define-your-models","title":"Step 1: Define Your Models","text":"<p>As a starting point, you will need to have your Django models defined. Here's an example using <code>Invoice</code> and <code>InvoiceItem</code> models:</p> <pre><code>from django.db import models\n\nclass Invoice(models.Model):\n    invoice_number = models.CharField(max_length=100)\n    date = models.DateField()\n    client = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.invoice_number\n\nclass InvoiceItem(models.Model):\n    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)\n    description = models.CharField(max_length=255)\n    quantity = models.IntegerField()\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.description\n</code></pre> <p>In this example, an <code>Invoice</code> can have multiple <code>InvoiceItems</code>.</p>"},{"location":"getting-started/#step-2-define-your-forms","title":"Step 2: Define Your Forms","text":"<p>The next step is to define the forms for your models. You will need to create a form for each model that you want to use with Django Crispy Formset Modal. Here's how you can define them for the <code>Invoice</code> and <code>InvoiceItem</code> models:</p> <pre><code>from django import forms\n\nfrom crispy_formset_modal.helper import ModalEditFormHelper\nfrom crispy_formset_modal.layout import ModalEditLayout\nfrom your_app.models import InvoiceItem\n\n\nclass InvoiceItemForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = ModalEditFormHelper()\n        self.helper.layout = ModalEditLayout(\n            \"description\",\n            \"quantity\",\n            \"unit_price\",\n        )\n\n    class Meta:\n        model = InvoiceItem\n        fields = \"__all__\"\n</code></pre> <pre><code>from crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Column, Fieldset, Layout, Row, Submit\nfrom django import forms\n\nfrom crispy_formset_modal.layout import ModalEditFormsetLayout\nfrom your_app.models import Invoice\nfrom your_app.forms import InvoiceItemForm\n\n\nclass InvoiceForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            Row(Column(\"invoice_number\"), Column(\"date\")),\n            \"client\",\n            Fieldset(\n                \"Items\",\n                ModalEditFormsetLayout(\n                    \"InvoiceItemInline\",\n                    list_display=[\"description\", \"quantity\", \"unit_price\"],\n                ),\n            ),\n            Submit(\"submit\", \"Save\", css_class=\"btn btn-primary float-right\"),\n        )\n\n    class Meta:\n        model = Invoice\n        fields = \"__all__\"\n</code></pre> <p>The <code>ModalEditFormsetLayout</code> allows you to define which inline formset should be displayed as a modal.</p>"},{"location":"getting-started/#step-3-define-your-views","title":"Step 3: Define Your Views","text":"<p>The final step in setting up Django Crispy Formset Modal is defining your views. Here's how you can define a <code>view</code> for creating an <code>Invoice</code>:</p> <pre><code>from extra_views import CreateWithInlinesView\nfrom your_app.models import Invoice\nfrom your_app.forms import InvoiceForm, InvoiceItemForm\n\nclass InvoiceItemInline(InlineFormSetFactory):\n    model = InvoiceItem\n    form_class = InvoiceItemForm\n    fields = [\"description\", \"quantity\", \"unit_price\"]\n    factory_kwargs = {\"extra\": 0}\n\nclass CreateInvoiceView(CreateWithInlinesView):\n    model = Invoice\n    inlines = [InvoiceItemInline]\n    form_class = InvoiceForm\n</code></pre> <p>With these steps, you are now ready to start using Django Crispy Formset Modal in your Django project. In the next section, we'll cover more advanced usage of the package.</p>"},{"location":"installation/","title":"Installation","text":"<p>Installing Django Crispy Formset Modal is a straightforward process, made even simpler if you're familiar with Python's package manager, pip. Follow these steps to install and set up Django Crispy Formset Modal in your Django project.</p>"},{"location":"installation/#step-1-install-the-package","title":"Step 1: Install the Package","text":"<p>To start, open your terminal and install the package using pip:</p> <pre><code>pip install django-crispy-formset-modal\n</code></pre> <p>This command will download and install Django Crispy Formset Modal from the Python Package Index (PyPI) to your Python environment.</p>"},{"location":"installation/#step-2-add-the-app-to-your-django-project","title":"Step 2: Add the App to Your Django Project","text":"<p>Once the package is installed, you'll need to add it to your Django project. Open your Django project's settings.py file and add 'crispy_formset_modal' to the <code>INSTALLED_APPS</code> list:</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'crispy_formset_modal',\n    ...\n]\n</code></pre> <p>Note</p> <p>Django Crispy Formset Modal relies on Django Crispy Forms and Django Extra Views. Ensure that these are also installed and added to your <code>INSTALLED_APPS</code> list</p>"},{"location":"installation/#3-include-the-javascript-file","title":"3. Include the JavaScript file","text":"<p>Django Crispy Formset Modal relies on a JavaScript file to handle formset manipulation on the client side. You need to include this file in your Django templates where you plan to use Django Crispy Formset Modal. This file should be added after jQuery, which is also a dependency.</p> <p>Here's how to include the JavaScript file in your template:</p> <pre><code>&lt;script src=\"{% static 'crispy_formset_modal/js/crispy-formset-modal.min.js' %}\"&gt;&lt;/script&gt;\n</code></pre> <p>Make sure <code>{% load static %}</code> is present at the top of your template to use the <code>{% static %}</code> template tag.</p> <p>Here's a complete example of a template including jQuery and the Django Crispy Formset Modal JavaScript file:</p> <pre><code>{% load static %}\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;!-- Other head tags --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Your content --&gt;\n\n    &lt;!-- Include jQuery --&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- Include Django Crispy Formset Modal's JS --&gt;\n    &lt;script src=\"{% static 'crispy_formset_modal/js/crispy-formset-modal.min.js' %}\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Remember to include these scripts at the end of your HTML body to ensure that they do not block rendering of your page content.</p> <p>With these steps, Django Crispy Formset Modal is now installed and ready to use in your Django project. Continue to the next section to learn how to prepare your project to use Django Crispy Formset Modal.</p>"}]}